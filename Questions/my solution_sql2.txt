A ski resort company is planning to construct a new ski slope using a pre-existing network of
mountain huts and trails between them. A new slope has to begin at one of the mountain huts,
have a middle station at another hut connected with the first one by a direct trail, and end at
the third mountain hut which is also connected by a direct trail to the second hut. The altitude
of the three huts chosen for constructing the ski slope has to be strictly decreasing.

drop table if exists mountain_huts;
create table mountain_huts 
(
	id 			integer not null unique,
	name 		varchar(40) not null unique,
	altitude 	integer not null
);
insert into mountain_huts values (1, 'Dakonat', 1900);
insert into mountain_huts values (2, 'Natisa', 2100);
insert into mountain_huts values (3, 'Gajantut', 1600);
insert into mountain_huts values (4, 'Rifat', 782);
insert into mountain_huts values (5, 'Tupur', 1370);

drop table if exists trails;
create table trails 
(
	hut1 		integer not null,
	hut2 		integer not null
);
insert into trails values (1, 3);
insert into trails values (3, 2);
insert into trails values (3, 5);
insert into trails values (4, 5);
insert into trails values (1, 5);

-- with tab1 as
-- (select * from mountain_huts),
-- tab2 as
-- (select id as id1,name as name1,altitude as alt1 
--  from mountain_huts m join trails t on t.hut2=m.id)
-- select * from tab1 join tab2 on tab1.id=tab2.id1
with cte as(select m.id as h1,m.name as p1,
m.altitude as a1,t.hut2 as h2 from mountain_huts m join trails t on m.id=t.hut1),
cte1 as (select c.*,m1.name as p2,m1.altitude as a2,
case when c.a1 > m1.altitude then 1 else 0 end as ref
from cte c join mountain_huts m1 on m1.id=c.h2),
cte2 as(select
case when ref=1 then h1 else h2 end as hut1,
case when ref=1 then p1 else p2 end as start,
case when ref=1 then a1 else a2 end as a1,
case when ref=1 then h2 else h1 end as hut2,
case when ref=1 then p2 else p1 end as middle,
case when ref=1 then a2 else a1 end as a2
from cte1)
select c1.hut1,c1.start,c1.hut2,c1.middle,c2.hut2 as hut3,c2.middle as destination
from cte2 c1 join cte2 c2 on c1.hut2=c2.hut1











-- SOLUTION
with cte_trails1 as
		(select t1.hut1 as start_hut, h1.name as start_hut_name
		 ,h1.altitude as start_hut_altitude, t1.hut2 as end_hut
		from mountain_huts h1
		join trails t1 on t1.hut1 = h1.id),
	cte_trails2 as
		(select t2.*, h2.name as end_hut_name, h2.altitude as end_hut_altitude
		, case when start_hut_altitude > h2.altitude then 1 else 0 end as altitude_flag
		from cte_trails1 t2
		join mountain_huts h2 on h2.id = t2.end_hut),
	cte_final as
		(select case when altitude_flag = 1 then start_hut else end_hut end as start_hut
		, case when altitude_flag = 1 then start_hut_name else end_hut_name end as start_hut_name
		, case when altitude_flag = 1 then end_hut else start_hut end as end_hut
		, case when altitude_flag = 1 then end_hut_name else start_hut_name end as end_hut_name
		from cte_trails2)
-- select * from cte_trails2
select c1.start_hut_name as startpt
, c1.end_hut_name as middlept
, c2.end_hut_name as endpt
from cte_final c1
join cte_final c2 on c1.end_hut = c2.start_hut;
